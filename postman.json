{
	"variables": [],
	"info": {
		"name": "MSA-GEOHASH",
		"_postman_id": "dbaf1b29-4554-0319-64b3-6fbdc13cfd79",
		"description": "Geohashing as a service",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "geohash",
			"description": "Folder for geohash",
			"item": [
				{
					"name": "Encodes a given pair of coordinates into a geohash",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Returns the expected geohash\"] = jsonData.geohash === \"f25eh9wgrypy\";"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:9907/geohash/encode?lat=45.53617475484822&lon=-73.62075805664062",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Encodes a given pair of coordinates (in geojson format) into a geohash",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Returns the expected geohash\"] = jsonData.geohash === \"sqdtr74nb9ft\";"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:9907/geohash/encode",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"coordinates\": [\n    15.087, \n    37.503\n  ], \n  \"type\": \"Point\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Decodes a geohash into a pair of coordinates (returns a geojson Point ) ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Returns the expected geojson point\"] = jsonData.type === \"Point\";"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:9907/geohash/decode/sqdtr74nb9f",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Decodes a geohash into a pair of coordinates (returns a geojson Polygon in exact mode )",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Returns the expected geojson polygon\"] = jsonData.type === \"Polygon\";"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:9907/geohash/decode/sqdtr74nb9f?exact=true",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Returns the precision of a given geohash, in meters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Returns the expected precision\"] = jsonData.precision.number === 610;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:9907/geohash/precision/f25eh9",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "ms",
			"description": "Folder for ms",
			"item": [
				{
					"name": "Return the microservice version number",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:9907/ms/version",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Return the microservice name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:9907/ms/name",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Return the microservice readme in markdown",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:9907/ms/readme.md",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Return the microservice readme in html",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:9907/ms/readme.html",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "nginx",
			"description": "Folder for nginx",
			"item": [
				{
					"name": "Return stats about Nginx in JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:9907/nginx/stats.json",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Return a dashboard displaying the stats from Nginx",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:9907/nginx/stats.html",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "swagger",
			"description": "Folder for swagger",
			"item": [
				{
					"name": "Return the microservice Swagger JSON file",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:9907/swagger/swagger.json",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Return the Swagger-UI page",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "http://localhost:9907/swagger/#",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}